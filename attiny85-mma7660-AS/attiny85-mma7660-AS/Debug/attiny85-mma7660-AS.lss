
attiny85-mma7660-AS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  000005c6  0000065a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800160  00800160  0000075a  2**0
                  ALLOC
  3 .stab         00000024  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000001e  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  0000079e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007d0  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000050  00000000  00000000  00000810  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000004de  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000001d6  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000213  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000070  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000211  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000016d  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  00001516  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	11 e0       	ldi	r17, 0x01	; 1
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e6 ec       	ldi	r30, 0xC6	; 198
  32:	f5 e0       	ldi	r31, 0x05	; 5
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ae 36       	cpi	r26, 0x6E	; 110
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	88 d0       	rcall	.+272    	; 0x162 <main>
  52:	b7 c2       	rjmp	.+1390   	; 0x5c2 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <i2c_delay_T2>:
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 3 cycles
#if F_CPU <= 4000000UL
	rjmp 1f      ; 2   "
  56:	00 c0       	rjmp	.+0      	; 0x58 <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
  58:	00 c0       	rjmp	.+0      	; 0x5a <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
  5a:	00 c0       	rjmp	.+0      	; 0x5c <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
  5c:	00 c0       	rjmp	.+0      	; 0x5e <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
  5e:	00 c0       	rjmp	.+0      	; 0x60 <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
  60:	00 c0       	rjmp	.+0      	; 0x62 <i2c_delay_T2+0xc>
6:	nop          ; 1   "
  62:	00 00       	nop
	ret          ; 4   "  total 20 cyles = 5.0 microsec with 4 Mhz crystal 
  64:	08 95       	ret

00000066 <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
  66:	bb 98       	cbi	0x17, 3	; 23
	cbi SCL_DDR,SCL		;release SCL
  68:	bc 98       	cbi	0x17, 4	; 23
	cbi SDA_OUT,SDA
  6a:	c3 98       	cbi	0x18, 3	; 24
	cbi SCL_OUT,SCL
  6c:	c4 98       	cbi	0x18, 4	; 24
	ret
  6e:	08 95       	ret

00000070 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
  70:	bb 9a       	sbi	0x17, 3	; 23
	rcall 	i2c_delay_T2	;delay T/2
  72:	f1 df       	rcall	.-30     	; 0x56 <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
  74:	1d d0       	rcall	.+58     	; 0xb0 <i2c_write>
	ret
  76:	08 95       	ret

00000078 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
  78:	bc 9a       	sbi	0x17, 4	; 23
	rcall 	i2c_delay_T2	;delay  T/2
  7a:	ed df       	rcall	.-38     	; 0x56 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
  7c:	bb 98       	cbi	0x17, 3	; 23
	rcall	i2c_delay_T2	;delay T/2
  7e:	eb df       	rcall	.-42     	; 0x56 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  80:	bc 98       	cbi	0x17, 4	; 23
	rcall 	i2c_delay_T2	;delay  T/2
  82:	e9 df       	rcall	.-46     	; 0x56 <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
  84:	bb 9a       	sbi	0x17, 3	; 23
	rcall 	i2c_delay_T2	;delay	T/2
  86:	e7 df       	rcall	.-50     	; 0x56 <i2c_delay_T2>
	
	rcall	i2c_write	;write address
  88:	13 d0       	rcall	.+38     	; 0xb0 <i2c_write>
	ret
  8a:	08 95       	ret

0000008c <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
  8c:	08 2e       	mov	r0, r24

0000008e <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
  8e:	bb 9a       	sbi	0x17, 3	; 23
	rcall 	i2c_delay_T2	;delay T/2
  90:	e2 df       	rcall	.-60     	; 0x56 <i2c_delay_T2>
	mov	r24,__tmp_reg__
  92:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
  94:	0d d0       	rcall	.+26     	; 0xb0 <i2c_write>
	tst	r24		;if device not busy -> done
  96:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
  98:	11 f0       	breq	.+4      	; 0x9e <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
  9a:	02 d0       	rcall	.+4      	; 0xa0 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
  9c:	f8 cf       	rjmp	.-16     	; 0x8e <i2c_start_wait1>

0000009e <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
  9e:	08 95       	ret

000000a0 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
  a0:	bc 9a       	sbi	0x17, 4	; 23
	sbi	SDA_DDR,SDA	;force SDA low
  a2:	bb 9a       	sbi	0x17, 3	; 23
	rcall	i2c_delay_T2	;delay T/2
  a4:	d8 df       	rcall	.-80     	; 0x56 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  a6:	bc 98       	cbi	0x17, 4	; 23
	rcall	i2c_delay_T2	;delay T/2
  a8:	d6 df       	rcall	.-84     	; 0x56 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
  aa:	bb 98       	cbi	0x17, 3	; 23
	rcall	i2c_delay_T2	;delay T/2
  ac:	d4 df       	rcall	.-88     	; 0x56 <i2c_delay_T2>
	ret
  ae:	08 95       	ret

000000b0 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
  b0:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
  b2:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <i2c_write_first>

000000b6 <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
  b6:	88 0f       	add	r24, r24

000000b8 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
  b8:	59 f0       	breq	.+22     	; 0xd0 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
  ba:	bc 9a       	sbi	0x17, 4	; 23
	brcc	i2c_write_low
  bc:	18 f4       	brcc	.+6      	; 0xc4 <i2c_write_low>
	nop
  be:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
  c0:	bb 98       	cbi	0x17, 3	; 23
	rjmp	i2c_write_high
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <i2c_write_high>

000000c4 <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
  c4:	bb 9a       	sbi	0x17, 3	; 23
	rjmp	i2c_write_high
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <i2c_write_high>

000000c8 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
  c8:	c6 df       	rcall	.-116    	; 0x56 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  ca:	bc 98       	cbi	0x17, 4	; 23
	rcall	i2c_delay_T2	;delay T/2
  cc:	c4 df       	rcall	.-120    	; 0x56 <i2c_delay_T2>
	rjmp	i2c_write_bit
  ce:	f3 cf       	rjmp	.-26     	; 0xb6 <i2c_write_bit>

000000d0 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
  d0:	bc 9a       	sbi	0x17, 4	; 23
	cbi	SDA_DDR,SDA	;release SDA
  d2:	bb 98       	cbi	0x17, 3	; 23
	rcall	i2c_delay_T2	;delay T/2
  d4:	c0 df       	rcall	.-128    	; 0x56 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  d6:	bc 98       	cbi	0x17, 4	; 23

000000d8 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
  d8:	b4 9b       	sbis	0x16, 4	; 22
	rjmp	i2c_ack_wait
  da:	fe cf       	rjmp	.-4      	; 0xd8 <i2c_ack_wait>
	
	clr	r24		;return 0
  dc:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
  de:	b3 99       	sbic	0x16, 3	; 22
	ldi	r24,1
  e0:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
  e2:	b9 df       	rcall	.-142    	; 0x56 <i2c_delay_T2>
	clr	r25
  e4:	99 27       	eor	r25, r25
	ret
  e6:	08 95       	ret

000000e8 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
  e8:	88 27       	eor	r24, r24
	rjmp	i2c_read
  ea:	01 c0       	rjmp	.+2      	; 0xee <i2c_read>

000000ec <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
  ec:	81 e0       	ldi	r24, 0x01	; 1

000000ee <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
  ee:	71 e0       	ldi	r23, 0x01	; 1

000000f0 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
  f0:	bc 9a       	sbi	0x17, 4	; 23
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
  f2:	bb 98       	cbi	0x17, 3	; 23
	rcall	i2c_delay_T2	;delay T/2
  f4:	b0 df       	rcall	.-160    	; 0x56 <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
  f6:	bc 98       	cbi	0x17, 4	; 23
	rcall	i2c_delay_T2	;delay T/2
  f8:	ae df       	rcall	.-164    	; 0x56 <i2c_delay_T2>

000000fa <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
  fa:	b4 9b       	sbis	0x16, 4	; 22
    rjmp	i2c_read_stretch
  fc:	fe cf       	rjmp	.-4      	; 0xfa <i2c_read_stretch>
    	
	clc			;clear carry flag
  fe:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
 100:	b3 99       	sbic	0x16, 3	; 22
	sec			;  set carry flag
 102:	08 94       	sec
	
	rol	r23		;store bit
 104:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
 106:	a0 f7       	brcc	.-24     	; 0xf0 <i2c_read_bit>

00000108 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
 108:	bc 9a       	sbi	0x17, 4	; 23
	cpi	r24,1
 10a:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
 10c:	11 f0       	breq	.+4      	; 0x112 <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
 10e:	bb 98       	cbi	0x17, 3	; 23
	rjmp	i2c_put_ack_high
 110:	01 c0       	rjmp	.+2      	; 0x114 <i2c_put_ack_high>

00000112 <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
 112:	bb 9a       	sbi	0x17, 3	; 23

00000114 <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
 114:	a0 df       	rcall	.-192    	; 0x56 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 116:	bc 98       	cbi	0x17, 4	; 23

00000118 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
 118:	b4 9b       	sbis	0x16, 4	; 22
	rjmp	i2c_put_ack_wait
 11a:	fe cf       	rjmp	.-4      	; 0x118 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
 11c:	9c df       	rcall	.-200    	; 0x56 <i2c_delay_T2>
	mov	r24,r23
 11e:	87 2f       	mov	r24, r23
	clr	r25
 120:	99 27       	eor	r25, r25
	ret
 122:	08 95       	ret

00000124 <mma7660_set_data>:

// MMA7660
// set data to given register
// See Figure 12. Single Byte Write - in MMA7660 datasheet
void mma7660_set_data(uint8_t reg, uint8_t data)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	d8 2f       	mov	r29, r24
 12a:	c6 2f       	mov	r28, r22
    // issue START
    i2c_start((0x4C << 1)|0x0);
 12c:	88 e9       	ldi	r24, 0x98	; 152
 12e:	a0 df       	rcall	.-192    	; 0x70 <i2c_start>
    // write register 
    i2c_write(reg);
 130:	8d 2f       	mov	r24, r29
 132:	be df       	rcall	.-132    	; 0xb0 <i2c_write>
    // write data 
    i2c_write(data);
 134:	8c 2f       	mov	r24, r28
 136:	bc df       	rcall	.-136    	; 0xb0 <i2c_write>
    // issue STOP
    i2c_stop();
 138:	b3 df       	rcall	.-154    	; 0xa0 <i2c_stop>
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <mma7660_get_data>:

// MMA7660
// get data from given register
// See Figure 14. Single Byte Read - in MMA7660 datasheet
void mma7660_get_data(uint8_t reg, uint8_t* data)
{
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	18 2f       	mov	r17, r24
 148:	eb 01       	movw	r28, r22
    // issuse START
    i2c_start((0x4C << 1)|0x0);
 14a:	88 e9       	ldi	r24, 0x98	; 152
 14c:	91 df       	rcall	.-222    	; 0x70 <i2c_start>
    // write register
    i2c_write(reg);
 14e:	81 2f       	mov	r24, r17
 150:	af df       	rcall	.-162    	; 0xb0 <i2c_write>
    // issue Repeated START
    i2c_rep_start((0x4C << 1)|0x1);
 152:	89 e9       	ldi	r24, 0x99	; 153
 154:	91 df       	rcall	.-222    	; 0x78 <i2c_rep_start>
    // read data and issue STOP
    *data = i2c_readNak();
 156:	c8 df       	rcall	.-112    	; 0xe8 <i2c_readNak>
 158:	88 83       	st	Y, r24
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	08 95       	ret

00000162 <main>:
unsigned char ret;
uint8_t gdata;
float ax, ay, az;

int main()
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	00 d0       	rcall	.+0      	; 0x168 <main+0x6>
 168:	1f 92       	push	r1
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
	
  // initialize I2C
  i2c_init();
 16e:	7b df       	rcall	.-266    	; 0x66 <i2c_init>
	
  // set up MMA7660:

  // set MODE to stand by
  mma7660_set_data(0x07,0x00);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	d7 df       	rcall	.-82     	; 0x124 <mma7660_set_data>

  // set up SR register
  mma7660_set_data(0x08,0x00);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	88 e0       	ldi	r24, 0x08	; 8
 17a:	d4 df       	rcall	.-88     	; 0x124 <mma7660_set_data>

  // set up interrupt register
  mma7660_set_data(0x06,0b11100100);
 17c:	64 ee       	ldi	r22, 0xE4	; 228
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	d1 df       	rcall	.-94     	; 0x124 <mma7660_set_data>

  // tap detection reg
  mma7660_set_data(0x09,11);
 182:	6b e0       	ldi	r22, 0x0B	; 11
 184:	89 e0       	ldi	r24, 0x09	; 9
 186:	ce df       	rcall	.-100    	; 0x124 <mma7660_set_data>
	
  // tap debounce reg
  mma7660_set_data(0x0a,11);
 188:	6b e0       	ldi	r22, 0x0B	; 11
 18a:	8a e0       	ldi	r24, 0x0A	; 10
 18c:	cb df       	rcall	.-106    	; 0x124 <mma7660_set_data>

  // count
  mma7660_set_data(0x05, 0xff);
 18e:	6f ef       	ldi	r22, 0xFF	; 255
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	c8 df       	rcall	.-112    	; 0x124 <mma7660_set_data>
	
  // set MODE to active
  mma7660_set_data(0x07,0b00011001);
 194:	69 e1       	ldi	r22, 0x19	; 25
 196:	87 e0       	ldi	r24, 0x07	; 7
 198:	c5 df       	rcall	.-118    	; 0x124 <mma7660_set_data>

  DDRB = (0x1 << PB2);
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	87 bb       	out	0x17, r24	; 23
    
  // main loop 
  while (1) {	
    
    uint8_t x, y, z;
    mma7660_get_data(0x00, &x);
 19e:	be 01       	movw	r22, r28
 1a0:	6d 5f       	subi	r22, 0xFD	; 253
 1a2:	7f 4f       	sbci	r23, 0xFF	; 255
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	cc df       	rcall	.-104    	; 0x140 <mma7660_get_data>
    mma7660_get_data(0x01, &y);
 1a8:	be 01       	movw	r22, r28
 1aa:	6e 5f       	subi	r22, 0xFE	; 254
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	c7 df       	rcall	.-114    	; 0x140 <mma7660_get_data>
    mma7660_get_data(0x02, &z);
 1b2:	be 01       	movw	r22, r28
 1b4:	6f 5f       	subi	r22, 0xFF	; 255
 1b6:	7f 4f       	sbci	r23, 0xFF	; 255
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	c2 df       	rcall	.-124    	; 0x140 <mma7660_get_data>
    
    ax = gLUT[x];
 1bc:	eb 81       	ldd	r30, Y+3	; 0x03
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	e0 5a       	subi	r30, 0xA0	; 160
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	c0 80       	ld	r12, Z
 1ce:	d1 80       	ldd	r13, Z+1	; 0x01
 1d0:	e2 80       	ldd	r14, Z+2	; 0x02
 1d2:	f3 80       	ldd	r15, Z+3	; 0x03
 1d4:	c0 92 64 01 	sts	0x0164, r12
 1d8:	d0 92 65 01 	sts	0x0165, r13
 1dc:	e0 92 66 01 	sts	0x0166, r14
 1e0:	f0 92 67 01 	sts	0x0167, r15
    ay = gLUT[y];
 1e4:	ea 81       	ldd	r30, Y+2	; 0x02
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	ee 0f       	add	r30, r30
 1ea:	ff 1f       	adc	r31, r31
 1ec:	ee 0f       	add	r30, r30
 1ee:	ff 1f       	adc	r31, r31
 1f0:	e0 5a       	subi	r30, 0xA0	; 160
 1f2:	ff 4f       	sbci	r31, 0xFF	; 255
 1f4:	80 80       	ld	r8, Z
 1f6:	91 80       	ldd	r9, Z+1	; 0x01
 1f8:	a2 80       	ldd	r10, Z+2	; 0x02
 1fa:	b3 80       	ldd	r11, Z+3	; 0x03
 1fc:	80 92 6a 01 	sts	0x016A, r8
 200:	90 92 6b 01 	sts	0x016B, r9
 204:	a0 92 6c 01 	sts	0x016C, r10
 208:	b0 92 6d 01 	sts	0x016D, r11
    az = gLUT[z];
 20c:	e9 81       	ldd	r30, Y+1	; 0x01
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	e0 5a       	subi	r30, 0xA0	; 160
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	40 80       	ld	r4, Z
 21e:	51 80       	ldd	r5, Z+1	; 0x01
 220:	62 80       	ldd	r6, Z+2	; 0x02
 222:	73 80       	ldd	r7, Z+3	; 0x03
 224:	40 92 60 01 	sts	0x0160, r4
 228:	50 92 61 01 	sts	0x0161, r5
 22c:	60 92 62 01 	sts	0x0162, r6
 230:	70 92 63 01 	sts	0x0163, r7
    
    // for debugging - breakpt
    ret = 5 + ax + ay + az;
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 ea       	ldi	r20, 0xA0	; 160
 23a:	50 e4       	ldi	r21, 0x40	; 64
 23c:	c7 01       	movw	r24, r14
 23e:	b6 01       	movw	r22, r12
 240:	48 d0       	rcall	.+144    	; 0x2d2 <__addsf3>
 242:	9b 01       	movw	r18, r22
 244:	ac 01       	movw	r20, r24
 246:	c5 01       	movw	r24, r10
 248:	b4 01       	movw	r22, r8
 24a:	43 d0       	rcall	.+134    	; 0x2d2 <__addsf3>
 24c:	9b 01       	movw	r18, r22
 24e:	ac 01       	movw	r20, r24
 250:	c3 01       	movw	r24, r6
 252:	b2 01       	movw	r22, r4
 254:	3e d0       	rcall	.+124    	; 0x2d2 <__addsf3>
 256:	a5 d0       	rcall	.+330    	; 0x3a2 <__fixunssfsi>
 258:	60 93 69 01 	sts	0x0169, r22

    float aSq = ax*ax + ay*ay + az*az;
 25c:	a7 01       	movw	r20, r14
 25e:	96 01       	movw	r18, r12
 260:	c7 01       	movw	r24, r14
 262:	b6 01       	movw	r22, r12
 264:	43 d1       	rcall	.+646    	; 0x4ec <__mulsf3>
 266:	6b 01       	movw	r12, r22
 268:	7c 01       	movw	r14, r24
 26a:	a5 01       	movw	r20, r10
 26c:	94 01       	movw	r18, r8
 26e:	c5 01       	movw	r24, r10
 270:	b4 01       	movw	r22, r8
 272:	3c d1       	rcall	.+632    	; 0x4ec <__mulsf3>
 274:	9b 01       	movw	r18, r22
 276:	ac 01       	movw	r20, r24
 278:	c7 01       	movw	r24, r14
 27a:	b6 01       	movw	r22, r12
 27c:	2a d0       	rcall	.+84     	; 0x2d2 <__addsf3>
 27e:	6b 01       	movw	r12, r22
 280:	7c 01       	movw	r14, r24
 282:	a3 01       	movw	r20, r6
 284:	92 01       	movw	r18, r4
 286:	c3 01       	movw	r24, r6
 288:	b2 01       	movw	r22, r4
 28a:	30 d1       	rcall	.+608    	; 0x4ec <__mulsf3>
 28c:	9b 01       	movw	r18, r22
 28e:	ac 01       	movw	r20, r24
 290:	c7 01       	movw	r24, r14
 292:	b6 01       	movw	r22, r12
 294:	1e d0       	rcall	.+60     	; 0x2d2 <__addsf3>
 296:	6b 01       	movw	r12, r22
 298:	7c 01       	movw	r14, r24
	
	// MMA7660 limit is +-1.5g
    if (aSq > 2.0 && aSq < 6.75) {
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	50 e4       	ldi	r21, 0x40	; 64
 2a2:	20 d1       	rcall	.+576    	; 0x4e4 <__gesf2>
 2a4:	18 16       	cp	r1, r24
 2a6:	0c f0       	brlt	.+2      	; 0x2aa <__stack+0x4b>
 2a8:	7a cf       	rjmp	.-268    	; 0x19e <main+0x3c>
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	48 ed       	ldi	r20, 0xD8	; 216
 2b0:	50 e4       	ldi	r21, 0x40	; 64
 2b2:	c7 01       	movw	r24, r14
 2b4:	b6 01       	movw	r22, r12
 2b6:	71 d0       	rcall	.+226    	; 0x39a <__cmpsf2>
 2b8:	88 23       	and	r24, r24
 2ba:	0c f0       	brlt	.+2      	; 0x2be <__stack+0x5f>
 2bc:	70 cf       	rjmp	.-288    	; 0x19e <main+0x3c>
      // flash# 1:
      // set high
      PORTB |= (0x1 << PB2);
 2be:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c0:	8f e3       	ldi	r24, 0x3F	; 63
 2c2:	9c e9       	ldi	r25, 0x9C	; 156
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <__stack+0x65>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <__stack+0x6b>
 2ca:	00 00       	nop
      _delay_ms(20);// set up MMA7660:
      // set low
      PORTB &= ~(0x1 << PB2);
 2cc:	c2 98       	cbi	0x18, 2	; 24
    }
		
    //_delay_ms(250);
		
  }
 2ce:	67 cf       	rjmp	.-306    	; 0x19e <main+0x3c>

000002d0 <__subsf3>:
 2d0:	50 58       	subi	r21, 0x80	; 128

000002d2 <__addsf3>:
 2d2:	bb 27       	eor	r27, r27
 2d4:	aa 27       	eor	r26, r26
 2d6:	0e d0       	rcall	.+28     	; 0x2f4 <__addsf3x>
 2d8:	cb c0       	rjmp	.+406    	; 0x470 <__fp_round>
 2da:	bc d0       	rcall	.+376    	; 0x454 <__fp_pscA>
 2dc:	30 f0       	brcs	.+12     	; 0x2ea <__addsf3+0x18>
 2de:	c1 d0       	rcall	.+386    	; 0x462 <__fp_pscB>
 2e0:	20 f0       	brcs	.+8      	; 0x2ea <__addsf3+0x18>
 2e2:	31 f4       	brne	.+12     	; 0x2f0 <__addsf3+0x1e>
 2e4:	9f 3f       	cpi	r25, 0xFF	; 255
 2e6:	11 f4       	brne	.+4      	; 0x2ec <__addsf3+0x1a>
 2e8:	1e f4       	brtc	.+6      	; 0x2f0 <__addsf3+0x1e>
 2ea:	b1 c0       	rjmp	.+354    	; 0x44e <__fp_nan>
 2ec:	0e f4       	brtc	.+2      	; 0x2f0 <__addsf3+0x1e>
 2ee:	e0 95       	com	r30
 2f0:	e7 fb       	bst	r30, 7
 2f2:	a7 c0       	rjmp	.+334    	; 0x442 <__fp_inf>

000002f4 <__addsf3x>:
 2f4:	e9 2f       	mov	r30, r25
 2f6:	cd d0       	rcall	.+410    	; 0x492 <__fp_split3>
 2f8:	80 f3       	brcs	.-32     	; 0x2da <__addsf3+0x8>
 2fa:	ba 17       	cp	r27, r26
 2fc:	62 07       	cpc	r22, r18
 2fe:	73 07       	cpc	r23, r19
 300:	84 07       	cpc	r24, r20
 302:	95 07       	cpc	r25, r21
 304:	18 f0       	brcs	.+6      	; 0x30c <__addsf3x+0x18>
 306:	71 f4       	brne	.+28     	; 0x324 <__addsf3x+0x30>
 308:	9e f5       	brtc	.+102    	; 0x370 <__addsf3x+0x7c>
 30a:	e5 c0       	rjmp	.+458    	; 0x4d6 <__fp_zero>
 30c:	0e f4       	brtc	.+2      	; 0x310 <__addsf3x+0x1c>
 30e:	e0 95       	com	r30
 310:	0b 2e       	mov	r0, r27
 312:	ba 2f       	mov	r27, r26
 314:	a0 2d       	mov	r26, r0
 316:	0b 01       	movw	r0, r22
 318:	b9 01       	movw	r22, r18
 31a:	90 01       	movw	r18, r0
 31c:	0c 01       	movw	r0, r24
 31e:	ca 01       	movw	r24, r20
 320:	a0 01       	movw	r20, r0
 322:	11 24       	eor	r1, r1
 324:	ff 27       	eor	r31, r31
 326:	59 1b       	sub	r21, r25
 328:	99 f0       	breq	.+38     	; 0x350 <__addsf3x+0x5c>
 32a:	59 3f       	cpi	r21, 0xF9	; 249
 32c:	50 f4       	brcc	.+20     	; 0x342 <__addsf3x+0x4e>
 32e:	50 3e       	cpi	r21, 0xE0	; 224
 330:	68 f1       	brcs	.+90     	; 0x38c <__addsf3x+0x98>
 332:	1a 16       	cp	r1, r26
 334:	f0 40       	sbci	r31, 0x00	; 0
 336:	a2 2f       	mov	r26, r18
 338:	23 2f       	mov	r18, r19
 33a:	34 2f       	mov	r19, r20
 33c:	44 27       	eor	r20, r20
 33e:	58 5f       	subi	r21, 0xF8	; 248
 340:	f3 cf       	rjmp	.-26     	; 0x328 <__addsf3x+0x34>
 342:	46 95       	lsr	r20
 344:	37 95       	ror	r19
 346:	27 95       	ror	r18
 348:	a7 95       	ror	r26
 34a:	f0 40       	sbci	r31, 0x00	; 0
 34c:	53 95       	inc	r21
 34e:	c9 f7       	brne	.-14     	; 0x342 <__addsf3x+0x4e>
 350:	7e f4       	brtc	.+30     	; 0x370 <__addsf3x+0x7c>
 352:	1f 16       	cp	r1, r31
 354:	ba 0b       	sbc	r27, r26
 356:	62 0b       	sbc	r22, r18
 358:	73 0b       	sbc	r23, r19
 35a:	84 0b       	sbc	r24, r20
 35c:	ba f0       	brmi	.+46     	; 0x38c <__addsf3x+0x98>
 35e:	91 50       	subi	r25, 0x01	; 1
 360:	a1 f0       	breq	.+40     	; 0x38a <__addsf3x+0x96>
 362:	ff 0f       	add	r31, r31
 364:	bb 1f       	adc	r27, r27
 366:	66 1f       	adc	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	88 1f       	adc	r24, r24
 36c:	c2 f7       	brpl	.-16     	; 0x35e <__addsf3x+0x6a>
 36e:	0e c0       	rjmp	.+28     	; 0x38c <__addsf3x+0x98>
 370:	ba 0f       	add	r27, r26
 372:	62 1f       	adc	r22, r18
 374:	73 1f       	adc	r23, r19
 376:	84 1f       	adc	r24, r20
 378:	48 f4       	brcc	.+18     	; 0x38c <__addsf3x+0x98>
 37a:	87 95       	ror	r24
 37c:	77 95       	ror	r23
 37e:	67 95       	ror	r22
 380:	b7 95       	ror	r27
 382:	f7 95       	ror	r31
 384:	9e 3f       	cpi	r25, 0xFE	; 254
 386:	08 f0       	brcs	.+2      	; 0x38a <__addsf3x+0x96>
 388:	b3 cf       	rjmp	.-154    	; 0x2f0 <__addsf3+0x1e>
 38a:	93 95       	inc	r25
 38c:	88 0f       	add	r24, r24
 38e:	08 f0       	brcs	.+2      	; 0x392 <__addsf3x+0x9e>
 390:	99 27       	eor	r25, r25
 392:	ee 0f       	add	r30, r30
 394:	97 95       	ror	r25
 396:	87 95       	ror	r24
 398:	08 95       	ret

0000039a <__cmpsf2>:
 39a:	2f d0       	rcall	.+94     	; 0x3fa <__fp_cmp>
 39c:	08 f4       	brcc	.+2      	; 0x3a0 <__cmpsf2+0x6>
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	08 95       	ret

000003a2 <__fixunssfsi>:
 3a2:	7f d0       	rcall	.+254    	; 0x4a2 <__fp_splitA>
 3a4:	88 f0       	brcs	.+34     	; 0x3c8 <__fixunssfsi+0x26>
 3a6:	9f 57       	subi	r25, 0x7F	; 127
 3a8:	90 f0       	brcs	.+36     	; 0x3ce <__fixunssfsi+0x2c>
 3aa:	b9 2f       	mov	r27, r25
 3ac:	99 27       	eor	r25, r25
 3ae:	b7 51       	subi	r27, 0x17	; 23
 3b0:	a0 f0       	brcs	.+40     	; 0x3da <__fixunssfsi+0x38>
 3b2:	d1 f0       	breq	.+52     	; 0x3e8 <__fixunssfsi+0x46>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	88 1f       	adc	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	1a f0       	brmi	.+6      	; 0x3c4 <__fixunssfsi+0x22>
 3be:	ba 95       	dec	r27
 3c0:	c9 f7       	brne	.-14     	; 0x3b4 <__fixunssfsi+0x12>
 3c2:	12 c0       	rjmp	.+36     	; 0x3e8 <__fixunssfsi+0x46>
 3c4:	b1 30       	cpi	r27, 0x01	; 1
 3c6:	81 f0       	breq	.+32     	; 0x3e8 <__fixunssfsi+0x46>
 3c8:	86 d0       	rcall	.+268    	; 0x4d6 <__fp_zero>
 3ca:	b1 e0       	ldi	r27, 0x01	; 1
 3cc:	08 95       	ret
 3ce:	83 c0       	rjmp	.+262    	; 0x4d6 <__fp_zero>
 3d0:	67 2f       	mov	r22, r23
 3d2:	78 2f       	mov	r23, r24
 3d4:	88 27       	eor	r24, r24
 3d6:	b8 5f       	subi	r27, 0xF8	; 248
 3d8:	39 f0       	breq	.+14     	; 0x3e8 <__fixunssfsi+0x46>
 3da:	b9 3f       	cpi	r27, 0xF9	; 249
 3dc:	cc f3       	brlt	.-14     	; 0x3d0 <__fixunssfsi+0x2e>
 3de:	86 95       	lsr	r24
 3e0:	77 95       	ror	r23
 3e2:	67 95       	ror	r22
 3e4:	b3 95       	inc	r27
 3e6:	d9 f7       	brne	.-10     	; 0x3de <__fixunssfsi+0x3c>
 3e8:	3e f4       	brtc	.+14     	; 0x3f8 <__fixunssfsi+0x56>
 3ea:	90 95       	com	r25
 3ec:	80 95       	com	r24
 3ee:	70 95       	com	r23
 3f0:	61 95       	neg	r22
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255
 3f4:	8f 4f       	sbci	r24, 0xFF	; 255
 3f6:	9f 4f       	sbci	r25, 0xFF	; 255
 3f8:	08 95       	ret

000003fa <__fp_cmp>:
 3fa:	99 0f       	add	r25, r25
 3fc:	00 08       	sbc	r0, r0
 3fe:	55 0f       	add	r21, r21
 400:	aa 0b       	sbc	r26, r26
 402:	e0 e8       	ldi	r30, 0x80	; 128
 404:	fe ef       	ldi	r31, 0xFE	; 254
 406:	16 16       	cp	r1, r22
 408:	17 06       	cpc	r1, r23
 40a:	e8 07       	cpc	r30, r24
 40c:	f9 07       	cpc	r31, r25
 40e:	c0 f0       	brcs	.+48     	; 0x440 <__fp_cmp+0x46>
 410:	12 16       	cp	r1, r18
 412:	13 06       	cpc	r1, r19
 414:	e4 07       	cpc	r30, r20
 416:	f5 07       	cpc	r31, r21
 418:	98 f0       	brcs	.+38     	; 0x440 <__fp_cmp+0x46>
 41a:	62 1b       	sub	r22, r18
 41c:	73 0b       	sbc	r23, r19
 41e:	84 0b       	sbc	r24, r20
 420:	95 0b       	sbc	r25, r21
 422:	39 f4       	brne	.+14     	; 0x432 <__fp_cmp+0x38>
 424:	0a 26       	eor	r0, r26
 426:	61 f0       	breq	.+24     	; 0x440 <__fp_cmp+0x46>
 428:	23 2b       	or	r18, r19
 42a:	24 2b       	or	r18, r20
 42c:	25 2b       	or	r18, r21
 42e:	21 f4       	brne	.+8      	; 0x438 <__fp_cmp+0x3e>
 430:	08 95       	ret
 432:	0a 26       	eor	r0, r26
 434:	09 f4       	brne	.+2      	; 0x438 <__fp_cmp+0x3e>
 436:	a1 40       	sbci	r26, 0x01	; 1
 438:	a6 95       	lsr	r26
 43a:	8f ef       	ldi	r24, 0xFF	; 255
 43c:	81 1d       	adc	r24, r1
 43e:	81 1d       	adc	r24, r1
 440:	08 95       	ret

00000442 <__fp_inf>:
 442:	97 f9       	bld	r25, 7
 444:	9f 67       	ori	r25, 0x7F	; 127
 446:	80 e8       	ldi	r24, 0x80	; 128
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	08 95       	ret

0000044e <__fp_nan>:
 44e:	9f ef       	ldi	r25, 0xFF	; 255
 450:	80 ec       	ldi	r24, 0xC0	; 192
 452:	08 95       	ret

00000454 <__fp_pscA>:
 454:	00 24       	eor	r0, r0
 456:	0a 94       	dec	r0
 458:	16 16       	cp	r1, r22
 45a:	17 06       	cpc	r1, r23
 45c:	18 06       	cpc	r1, r24
 45e:	09 06       	cpc	r0, r25
 460:	08 95       	ret

00000462 <__fp_pscB>:
 462:	00 24       	eor	r0, r0
 464:	0a 94       	dec	r0
 466:	12 16       	cp	r1, r18
 468:	13 06       	cpc	r1, r19
 46a:	14 06       	cpc	r1, r20
 46c:	05 06       	cpc	r0, r21
 46e:	08 95       	ret

00000470 <__fp_round>:
 470:	09 2e       	mov	r0, r25
 472:	03 94       	inc	r0
 474:	00 0c       	add	r0, r0
 476:	11 f4       	brne	.+4      	; 0x47c <__fp_round+0xc>
 478:	88 23       	and	r24, r24
 47a:	52 f0       	brmi	.+20     	; 0x490 <__fp_round+0x20>
 47c:	bb 0f       	add	r27, r27
 47e:	40 f4       	brcc	.+16     	; 0x490 <__fp_round+0x20>
 480:	bf 2b       	or	r27, r31
 482:	11 f4       	brne	.+4      	; 0x488 <__fp_round+0x18>
 484:	60 ff       	sbrs	r22, 0
 486:	04 c0       	rjmp	.+8      	; 0x490 <__fp_round+0x20>
 488:	6f 5f       	subi	r22, 0xFF	; 255
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	8f 4f       	sbci	r24, 0xFF	; 255
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
 490:	08 95       	ret

00000492 <__fp_split3>:
 492:	57 fd       	sbrc	r21, 7
 494:	90 58       	subi	r25, 0x80	; 128
 496:	44 0f       	add	r20, r20
 498:	55 1f       	adc	r21, r21
 49a:	59 f0       	breq	.+22     	; 0x4b2 <__fp_splitA+0x10>
 49c:	5f 3f       	cpi	r21, 0xFF	; 255
 49e:	71 f0       	breq	.+28     	; 0x4bc <__fp_splitA+0x1a>
 4a0:	47 95       	ror	r20

000004a2 <__fp_splitA>:
 4a2:	88 0f       	add	r24, r24
 4a4:	97 fb       	bst	r25, 7
 4a6:	99 1f       	adc	r25, r25
 4a8:	61 f0       	breq	.+24     	; 0x4c2 <__fp_splitA+0x20>
 4aa:	9f 3f       	cpi	r25, 0xFF	; 255
 4ac:	79 f0       	breq	.+30     	; 0x4cc <__fp_splitA+0x2a>
 4ae:	87 95       	ror	r24
 4b0:	08 95       	ret
 4b2:	12 16       	cp	r1, r18
 4b4:	13 06       	cpc	r1, r19
 4b6:	14 06       	cpc	r1, r20
 4b8:	55 1f       	adc	r21, r21
 4ba:	f2 cf       	rjmp	.-28     	; 0x4a0 <__fp_split3+0xe>
 4bc:	46 95       	lsr	r20
 4be:	f1 df       	rcall	.-30     	; 0x4a2 <__fp_splitA>
 4c0:	08 c0       	rjmp	.+16     	; 0x4d2 <__fp_splitA+0x30>
 4c2:	16 16       	cp	r1, r22
 4c4:	17 06       	cpc	r1, r23
 4c6:	18 06       	cpc	r1, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	f1 cf       	rjmp	.-30     	; 0x4ae <__fp_splitA+0xc>
 4cc:	86 95       	lsr	r24
 4ce:	71 05       	cpc	r23, r1
 4d0:	61 05       	cpc	r22, r1
 4d2:	08 94       	sec
 4d4:	08 95       	ret

000004d6 <__fp_zero>:
 4d6:	e8 94       	clt

000004d8 <__fp_szero>:
 4d8:	bb 27       	eor	r27, r27
 4da:	66 27       	eor	r22, r22
 4dc:	77 27       	eor	r23, r23
 4de:	cb 01       	movw	r24, r22
 4e0:	97 f9       	bld	r25, 7
 4e2:	08 95       	ret

000004e4 <__gesf2>:
 4e4:	8a df       	rcall	.-236    	; 0x3fa <__fp_cmp>
 4e6:	08 f4       	brcc	.+2      	; 0x4ea <__gesf2+0x6>
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	08 95       	ret

000004ec <__mulsf3>:
 4ec:	0a d0       	rcall	.+20     	; 0x502 <__mulsf3x>
 4ee:	c0 cf       	rjmp	.-128    	; 0x470 <__fp_round>
 4f0:	b1 df       	rcall	.-158    	; 0x454 <__fp_pscA>
 4f2:	28 f0       	brcs	.+10     	; 0x4fe <__mulsf3+0x12>
 4f4:	b6 df       	rcall	.-148    	; 0x462 <__fp_pscB>
 4f6:	18 f0       	brcs	.+6      	; 0x4fe <__mulsf3+0x12>
 4f8:	95 23       	and	r25, r21
 4fa:	09 f0       	breq	.+2      	; 0x4fe <__mulsf3+0x12>
 4fc:	a2 cf       	rjmp	.-188    	; 0x442 <__fp_inf>
 4fe:	a7 cf       	rjmp	.-178    	; 0x44e <__fp_nan>
 500:	eb cf       	rjmp	.-42     	; 0x4d8 <__fp_szero>

00000502 <__mulsf3x>:
 502:	c7 df       	rcall	.-114    	; 0x492 <__fp_split3>
 504:	a8 f3       	brcs	.-22     	; 0x4f0 <__mulsf3+0x4>

00000506 <__mulsf3_pse>:
 506:	99 23       	and	r25, r25
 508:	d9 f3       	breq	.-10     	; 0x500 <__mulsf3+0x14>
 50a:	55 23       	and	r21, r21
 50c:	c9 f3       	breq	.-14     	; 0x500 <__mulsf3+0x14>
 50e:	95 0f       	add	r25, r21
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	55 1f       	adc	r21, r21
 514:	aa 27       	eor	r26, r26
 516:	ee 27       	eor	r30, r30
 518:	ff 27       	eor	r31, r31
 51a:	bb 27       	eor	r27, r27
 51c:	00 24       	eor	r0, r0
 51e:	08 94       	sec
 520:	67 95       	ror	r22
 522:	20 f4       	brcc	.+8      	; 0x52c <__mulsf3_pse+0x26>
 524:	e2 0f       	add	r30, r18
 526:	f3 1f       	adc	r31, r19
 528:	b4 1f       	adc	r27, r20
 52a:	0a 1e       	adc	r0, r26
 52c:	22 0f       	add	r18, r18
 52e:	33 1f       	adc	r19, r19
 530:	44 1f       	adc	r20, r20
 532:	aa 1f       	adc	r26, r26
 534:	66 95       	lsr	r22
 536:	a9 f7       	brne	.-22     	; 0x522 <__mulsf3_pse+0x1c>
 538:	77 95       	ror	r23
 53a:	30 f4       	brcc	.+12     	; 0x548 <__mulsf3_pse+0x42>
 53c:	f3 0f       	add	r31, r19
 53e:	b4 1f       	adc	r27, r20
 540:	0a 1e       	adc	r0, r26
 542:	12 1e       	adc	r1, r18
 544:	08 f4       	brcc	.+2      	; 0x548 <__mulsf3_pse+0x42>
 546:	63 95       	inc	r22
 548:	33 0f       	add	r19, r19
 54a:	44 1f       	adc	r20, r20
 54c:	aa 1f       	adc	r26, r26
 54e:	22 1f       	adc	r18, r18
 550:	76 95       	lsr	r23
 552:	99 f7       	brne	.-26     	; 0x53a <__mulsf3_pse+0x34>
 554:	87 95       	ror	r24
 556:	20 f4       	brcc	.+8      	; 0x560 <__mulsf3_pse+0x5a>
 558:	b4 0f       	add	r27, r20
 55a:	0a 1e       	adc	r0, r26
 55c:	12 1e       	adc	r1, r18
 55e:	63 1f       	adc	r22, r19
 560:	44 0f       	add	r20, r20
 562:	aa 1f       	adc	r26, r26
 564:	22 1f       	adc	r18, r18
 566:	33 1f       	adc	r19, r19
 568:	86 95       	lsr	r24
 56a:	a9 f7       	brne	.-22     	; 0x556 <__mulsf3_pse+0x50>
 56c:	86 2f       	mov	r24, r22
 56e:	71 2d       	mov	r23, r1
 570:	60 2d       	mov	r22, r0
 572:	11 24       	eor	r1, r1
 574:	9f 57       	subi	r25, 0x7F	; 127
 576:	50 40       	sbci	r21, 0x00	; 0
 578:	8a f0       	brmi	.+34     	; 0x59c <__mulsf3_pse+0x96>
 57a:	e1 f0       	breq	.+56     	; 0x5b4 <__mulsf3_pse+0xae>
 57c:	88 23       	and	r24, r24
 57e:	4a f0       	brmi	.+18     	; 0x592 <__mulsf3_pse+0x8c>
 580:	ee 0f       	add	r30, r30
 582:	ff 1f       	adc	r31, r31
 584:	bb 1f       	adc	r27, r27
 586:	66 1f       	adc	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	88 1f       	adc	r24, r24
 58c:	91 50       	subi	r25, 0x01	; 1
 58e:	50 40       	sbci	r21, 0x00	; 0
 590:	a9 f7       	brne	.-22     	; 0x57c <__mulsf3_pse+0x76>
 592:	9e 3f       	cpi	r25, 0xFE	; 254
 594:	51 05       	cpc	r21, r1
 596:	70 f0       	brcs	.+28     	; 0x5b4 <__mulsf3_pse+0xae>
 598:	54 cf       	rjmp	.-344    	; 0x442 <__fp_inf>
 59a:	9e cf       	rjmp	.-196    	; 0x4d8 <__fp_szero>
 59c:	5f 3f       	cpi	r21, 0xFF	; 255
 59e:	ec f3       	brlt	.-6      	; 0x59a <__mulsf3_pse+0x94>
 5a0:	98 3e       	cpi	r25, 0xE8	; 232
 5a2:	dc f3       	brlt	.-10     	; 0x59a <__mulsf3_pse+0x94>
 5a4:	86 95       	lsr	r24
 5a6:	77 95       	ror	r23
 5a8:	67 95       	ror	r22
 5aa:	b7 95       	ror	r27
 5ac:	f7 95       	ror	r31
 5ae:	e7 95       	ror	r30
 5b0:	9f 5f       	subi	r25, 0xFF	; 255
 5b2:	c1 f7       	brne	.-16     	; 0x5a4 <__mulsf3_pse+0x9e>
 5b4:	fe 2b       	or	r31, r30
 5b6:	88 0f       	add	r24, r24
 5b8:	91 1d       	adc	r25, r1
 5ba:	96 95       	lsr	r25
 5bc:	87 95       	ror	r24
 5be:	97 f9       	bld	r25, 7
 5c0:	08 95       	ret

000005c2 <_exit>:
 5c2:	f8 94       	cli

000005c4 <__stop_program>:
 5c4:	ff cf       	rjmp	.-2      	; 0x5c4 <__stop_program>
